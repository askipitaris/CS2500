#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 81 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 128 192 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 128 192 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 0 0 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 0 0 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 128 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 128 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 128 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 0 0 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 0 0 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 0 0 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 9 #"Consolas\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 27 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 47 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 1573 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 194
(
 #"#reader(lib \"htdp-beginner-reader.ss\" \"lang\")((modname Full-prob"
 #"lems-homework-4) (read-case-sensitive #t) (teachpacks ()) (htdp-sett"
 #"ings #(#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 7 #"require"
0 0 27 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"str"
0 0 27 3 2 #" ("
0 0 14 3 4 #"star"
0 0 27 3 1 #" "
0 0 23 3 2 #"37"
0 0 27 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 27 3 1 #" "
0 0 20 3 8 #"\"yellow\""
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"tri"
0 0 27 3 2 #" ("
0 0 14 3 8 #"triangle"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 27 3 1 #" "
0 0 20 3 7 #"\"green\""
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"squar"
0 0 27 3 2 #" ("
0 0 14 3 6 #"square"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 27 3 1 #" "
0 0 20 3 6 #"\"blue\""
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"crcl"
0 0 27 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 27 3 1 #" "
0 0 23 3 2 #"30"
0 0 27 3 1 #" "
0 0 20 3 7 #"\"solid\""
0 0 27 3 1 #" "
0 0 20 3 5 #"\"red\""
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 31 #"; -------- Excercise 5 --------"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOI0"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 3 #"str"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 4 #"()))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOI1"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 3 #"tri"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOI0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOI2"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 5 #"squar"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOI1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOI3"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 4 #"crcl"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOI2"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 58
#"; places a frame around all the images in a List Of Images"
0 0 27 29 1 #"\n"
0 0 18 3 12 #"; LOI -> LOI"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"frame-LOI"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOI"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOI"
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 3 #"()]"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOI"
0 0 27 3 3 #") ("
0 0 14 3 6 #"append"
0 0 27 29 1 #"\n"
0 0 27 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 7 #"framing"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOI"
0 0 27 3 3 #")) "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 19 #"                  ("
0 0 14 3 9 #"frame-LOI"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOI"
0 0 27 3 6 #")))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"frame-LOI"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOI3"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 6           4 23 628
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:translate 30"
 #" 30 #(struct:ellipse 60 60 0 255 \"red\"))) #(struct:translate 0 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0"
 #" 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\"))"
 #"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon ("
 #"#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 "
 #"0) #(struct:pulled-point 0 0 60 60 0 0) #(struct:pulled-point 0 0 0 "
 #"60 0 0)) outline \"black\")))) #(struct:bb 60 60 60) #f)"
) 0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 6           4 23 765
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pu"
 #"lled-point 0 0 60 60 0 0) #(struct"
 #":pulled-point 0 0 0 60 0 0)) 255 \"blue\"))) #(struct:translate 0 0 "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 "
 #"0 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\")"
 #")))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0"
 #" 0) #(struct:pulled-point 0 0 60 60 0 0) #(struct:pulled-point 0 0 0"
 #" 60 0 0)) outline \"black\")))) #(struct:bb 60 60 60) #f)"
) 0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 6           4 23 808
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 4.01923788646684 #(struct:translate -0.0 51.9615242270663"
 #"2 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 60 0 0 0) #(struct:pulled-point 0 0 30.000000000000014 "
 #"-51.96152422706632 0 0)) 255 \"green\"))) #(struct:translate 0.0 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0"
 #" 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\"))"
 #"))) #(struct:translate 0.0 0.0 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 "
 #"0 0 0) #(struct:pulled-point 0 0 60 60 0 0) #(struct:pulled-point 0 "
 #"0 0 60 0 0)) outline \"black\")))) #(struct:bb 60.0 60.0 60.0) #f)"
) 0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 6           4 23 981
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0.06637120812694519 1.5314272811289058 #(struct:translate 1"
 #"1.433628791873055 56.93714543774219 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 48.433628791873055 -3"
 #"5.18909110292068 0 0) #(struct:pulled-point 0 0 -11.433628791873055 "
 #"-35.189091102920685 0 0) #(struct:pulled-point 0 0 37 0 0 0) #(struc"
 #"t:pulled-point 0 0 18.500000000000"
 #"004 -56.93714543774219 0 0)) 255 \"yellow\"))) #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0"
 #" 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point "
 #"0 0 60 60 0 0) #(struct:pulled-po"
 #"int 0 0 0 60 0 0)) outline \"black\"))))) #(struct:translate 0.0 0.0"
 #" #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0"
 #" 0 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\""
 #")))) #(struct:bb 60.0 60.0 60.0) #f)"
) 0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 7 #"())))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"frame-LOI"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOI2"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 6           4 23 765
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pu"
 #"lled-point 0 0 60 60 0 0) #(struct"
 #":pulled-point 0 0 0 60 0 0)) 255 \"blue\"))) #(struct:translate 0 0 "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 "
 #"0 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\")"
 #")))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0"
 #" 0) #(struct:pulled-point 0 0 60 60 0 0) #(struct:pulled-point 0 0 0"
 #" 60 0 0)) outline \"black\")))) #(struct:bb 60 60 60) #f)"
) 0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 6           4 23 808
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 4.01923788646684 #(struct:translate -0.0 51.9615242270663"
 #"2 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 60 0 0 0) #(struct:pulled-point 0 0 30.000000000000014 "
 #"-51.96152422706632 0 0)) 255 \"green\"))) #(struct:translate 0.0 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0"
 #" 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\"))"
 #"))) #(struct:translate 0.0 0.0 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 "
 #"0 0 0) #(struct:pulled-point 0 0 60 60 0 0) #(struct:pulled-point 0 "
 #"0 0 60 0 0)) outline \"black\")))) #(struct:bb 60.0 60.0 60.0) #f)"
) 0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 6           4 23 981
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0.06637120812694519 1.5314272811289058 #(struct:translate 1"
 #"1.433628791873055 56.93714543774219 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 48.433628791873055 -3"
 #"5.18909110292068 0 0) #(struct:pulled-point 0 0 -11.433628791873055 "
 #"-35.189091102920685 0 0) #(struct:pulled-point 0 0 37 0 0 0) #(struc"
 #"t:pulled-point 0 0 18.500000000000"
 #"004 -56.93714543774219 0 0)) 255 \"yellow\"))) #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0"
 #" 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point "
 #"0 0 60 60 0 0) #(struct:pulled-po"
 #"int 0 0 0 60 0 0)) outline \"black\"))))) #(struct:translate 0.0 0.0"
 #" #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0"
 #" 0 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\""
 #")))) #(struct:bb 60.0 60.0 60.0) #f)"
) 0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 6 #"()))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"frame-LOI"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOI1"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 6           4 23 808
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 4.01923788646684 #(struct:translate -0.0 51.9615242270663"
 #"2 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 60 0 0 0) #(struct:pulled-point 0 0 30.000000000000014 "
 #"-51.96152422706632 0 0)) 255 \"green\"))) #(struct:translate 0.0 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0"
 #" 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\"))"
 #"))) #(struct:translate 0.0 0.0 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 "
 #"0 0 0) #(struct:pulled-point 0 0 60 60 0 0) #(struct:pulled-point 0 "
 #"0 0 60 0 0)) outline \"black\")))) #(struct:bb 60.0 60.0 60.0) #f)"
) 0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 6           4 23 981
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0.06637120812694519 1.5314272811289058 #(struct:translate 1"
 #"1.433628791873055 56.93714543774219 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 48.433628791873055 -3"
 #"5.18909110292068 0 0) #(struct:pulled-point 0 0 -11.433628791873055 "
 #"-35.189091102920685 0 0) #(struct:pulled-point 0 0 37 0 0 0) #(struc"
 #"t:pulled-point 0 0 18.500000000000"
 #"004 -56.93714543774219 0 0)) 255 \"yellow\"))) #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0"
 #" 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point "
 #"0 0 60 60 0 0) #(struct:pulled-po"
 #"int 0 0 0 60 0 0)) outline \"black\"))))) #(struct:translate 0.0 0.0"
 #" #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0"
 #" 0 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\""
 #")))) #(struct:bb 60.0 60.0 60.0) #f)"
) 0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 5 #"())))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"frame-LOI"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOI0"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 6           4 23 981
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0.06637120812694519 1.5314272811289058 #(struct:translate 1"
 #"1.433628791873055 56.93714543774219 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 48.433628791873055 -3"
 #"5.18909110292068 0 0) #(struct:pulled-point 0 0 -11.433628791873055 "
 #"-35.189091102920685 0 0) #(struct:pulled-point 0 0 37 0 0 0) #(struc"
 #"t:pulled-point 0 0 18.500000000000"
 #"004 -56.93714543774219 0 0)) 255 \"yellow\"))) #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0"
 #" 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point "
 #"0 0 60 60 0 0) #(struct:pulled-po"
 #"int 0 0 0 60 0 0)) outline \"black\"))))) #(struct:translate 0.0 0.0"
 #" #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0"
 #" 0 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\""
 #")))) #(struct:bb 60.0 60.0 60.0) #f)"
) 0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 4 #"()))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 33 #"; Places a frame around the image"
0 0 27 29 1 #"\n"
0 0 18 3 12 #"; img -> img"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"  "
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"framing"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOI"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 7 #"overlay"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOI"
0 0 27 3 2 #" ("
0 0 14 3 6 #"square"
0 0 27 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOI"
0 0 27 3 2 #") "
0 0 20 3 9 #"\"outline\""
0 0 27 3 1 #" "
0 0 20 3 7 #"\"black\""
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 7 #"framing"
0 0 27 3 1 #" "
0 0 14 3 3 #"str"
0 0 27 3 2 #") "
0 6           4 23 707
(
 #"(#(struct:overlay #(struct:translate 0.06637120812694519 1.531427281"
 #"1289058 #(struct:translate 11.433628791873055 56.93714543774219 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 48.433628791873055 -35.18909110292068 0 0) #(struct:pulled-po"
 #"int 0 0 -11.433628791873055 -35.189091102920685 0 0) #(struct:pulled"
 #"-point 0 0 37 0 0 0) #(struct:pulled-point 0 0 18.500000000000004 -5"
 #"6.93714543774219 0 0)) 255 \"yellow\"))) #(struct:translate 0 0 #(st"
 #"ruct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0 60"
 #" 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\")))) "
 #"#(struct:bb 60.0 60.0 60.0) #f)"
) 0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 7 #"framing"
0 0 27 3 1 #" "
0 0 14 3 3 #"tri"
0 0 27 3 2 #") "
0 6           4 23 534
(
 #"(#(struct:overlay #(struct:translate 0 4.01923788646684 #(struct:tra"
 #"nslate -0.0 51.96152422706632 #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-p"
 #"oint 0 0 30.000000000000014 -51.96152422706632 0 0)) 255 \"green\"))"
 #") #(struct:translate 0.0 0 #(struct:translate 0 0 #(struct:polygon ("
 #"#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 "
 #"0) #(struct:pulled-point 0 0 60 60 0 0) #(struct:pulled-point 0 0 0 "
 #"60 0 0)) outline \"black\")))) #(struct:bb 60.0 60.0 60.0) #f)"
) 0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 7 #"framing"
0 0 27 3 1 #" "
0 0 14 3 5 #"squar"
0 0 27 3 2 #") "
0 6           4 23 495
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 60 0 0 0) #(struct:pulled-point 0 0 60 60 0 0) #(struct:pulle"
 #"d-point 0 0 0 60 0 0)) 255 \"blue\"))) #(struct:translate 0 0 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0 60 6"
 #"0 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\")))) #("
 #"struct:bb 60 60 60) #f)"
) 0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 7 #"framing"
0 0 27 3 1 #" "
0 0 14 3 4 #"crcl"
0 0 27 3 2 #") "
0 6           4 23 358
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:translate 30 30 #("
 #"struct:ellipse 60 60 0 255 \"red\"))) #(struct:translate 0 0 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0 60 60"
 #" 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\")))) #(s"
 #"truct:bb 60 60 60) #f)"
) 0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 31 #"; -------- Excercise 6 --------"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI0"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 7 #"framing"
0 0 27 3 1 #" "
0 0 14 3 3 #"str"
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 4 #"()))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI1"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 7 #"framing"
0 0 27 3 1 #" "
0 0 14 3 3 #"tri"
0 0 27 3 2 #") "
0 0 14 3 11 #"Framed-LOI0"
0 0 27 3 3 #")) "
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI2"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 7 #"framing"
0 0 27 3 1 #" "
0 0 14 3 5 #"squar"
0 0 27 3 2 #") "
0 0 14 3 11 #"Framed-LOI1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI3"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 7 #"framing"
0 0 27 3 1 #" "
0 0 14 3 4 #"crcl"
0 0 27 3 2 #") "
0 0 14 3 11 #"Framed-LOI2"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 26 #"; Measures an images width"
0 0 27 29 1 #"\n"
0 0 18 3 17 #"; Image -> Number"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 13 #"picture-width"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 3 #"()]"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 24 #"                       ("
0 0 14 3 14 #"picture-height"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 6 #")))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 13 #"picture-width"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI0"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 4 #"()))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 13 #"picture-width"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI1"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 5 #"())))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 13 #"picture-width"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI2"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 6 #"()))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 13 #"picture-width"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI3"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 7 #"())))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #" "
0 0 27 29 1 #"\n"
0 0 18 3 27 #";;Measures an images height"
0 0 27 29 1 #"\n"
0 0 18 3 17 #"; Image -> Number"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 14 #"picture-height"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 3 #"()]"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 12 #"image-height"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 24 #"                       ("
0 0 14 3 14 #"picture-height"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 6 #")))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 14 #"picture-height"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI0"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 4 #"()))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 14 #"picture-height"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI1"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 5 #"())))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 14 #"picture-height"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI2"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 6 #"()))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 14 #"picture-height"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI3"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 2 #"60"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 7 #"())))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 49 #"; Calculates the area of all the images in a list"
0 0 27 29 1 #"\n"
0 0 18 3 18 #"; Image -> Number "
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"area"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 3 1 #" "
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 2 #") "
0 0 23 3 1 #"0"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 14 3 1 #"+"
0 0 27 3 2 #" ("
0 0 14 3 1 #"*"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 2 #" ("
0 0 14 3 13 #"picture-width"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 3 #")) "
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 5 #"first"
0 0 27 3 2 #" ("
0 0 14 3 14 #"picture-height"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"area"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 6 #")))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 4 #"area"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI3"
0 0 27 3 2 #") "
0 0 23 3 5 #"14400"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 4 #"area"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI2"
0 0 27 3 2 #") "
0 0 23 3 5 #"10800"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 4 #"area"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI1"
0 0 27 3 2 #") "
0 0 23 3 4 #"7200"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 4 #"area"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI0"
0 0 27 3 2 #") "
0 0 23 3 4 #"3600"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 31 #"; -------- Excercise 7 --------"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 18 #"; Scales the image"
0 0 27 29 1 #"\n"
0 0 18 3 21 #"; scaler : LOI -> LOI"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"scale-img"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 3 #") ("
0 0 14 3 11 #"empty-scene"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 3 #") ("
0 0 14 3 12 #"beside/align"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"bottom\""
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 3 #") ("
0 0 14 3 5 #"scale"
0 0 27 3 1 #" "
0 0 23 3 3 #"0.9"
0 0 27 3 2 #" ("
0 0 14 3 9 #"scale-img"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 3 #"img"
0 0 27 3 7 #"))))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"scale-img"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI3"
0 0 27 3 2 #") "
0 6           4 23 3026
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:translate 30"
 #" 30 #(struct:ellipse 60 60 0 255 \"red\"))) #(struct:translate 0 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0"
 #" 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\"))"
 #"))) #(struct:translate 60 6.0 #(struct:scale 9/10 9/10 #(struct:over"
 #"lay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0"
 #" 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) 255 \"blue\"))) #(s"
 #"truct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(st"
 #"ruct:pulled-point 0 0 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)"
 #") outline \"black\"))))) #(struct:translate 60 6.0 #(struct:scale 9/"
 #"10 9/10 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 4.01923788646684 #(struct:translate -0.0 51.961524"
 #"22706632 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(stru"
 #"ct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0 30.000000000"
 #"000014 -51.96152422706632 0 0)) 255 \"green\"))) #(struct:translate "
 #"0.0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point"
 #" 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-po"
 #"int 0 0 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"bl"
 #"ack\"))))) #(struct:translate 60.0 6.0 #(struct:scale 9/10 9/10 #(st"
 #"ruct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:transl"
 #"ate 0.06637120812694519 1.5314272811289058 #(struct:translate 11.433"
 #"628791873055 56.93714543774219 #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 48.433628791873055 -35.189"
 #"09110292068 0 0) #(struct:pulled-point 0 0 -11.433628791873055 -35.1"
 #"89091102920685 0 0) #(struct:pulled-point 0 0 37 0 0 0) #(struct:pul"
 #"led-point 0 0 18.500000000000004 -56.93714543774219 0 0)) 255 \"yell"
 #"ow\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 "
 #"0 0 0) #(struct:pulled-point 0 0 60 60 0 0) #(struct:pulled-point 0 "
 #"0 0 60 0 0)) outline \"black\"))))) #(struct:translate 60.0 60.0 #(s"
 #"truct:scale 9/10 9/10 #(struct:crop (#(struct:point 0 0) #(struct:po"
 #"int 0 0) #(struct:point 0 0) #(struct:point 0 0)) #(struct:translate"
 #" 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 "
 #"#(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled"
 #"-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 0 0 0 0)) outline #(struct:pen \"black\" 2 solid round "
 #"round)))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 0 0 0 0)) 255 \"white\")))))))))))))))))) #(struct:bb 206.340000000"
 #"00003 60.0 60.0) #f)"
) 0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"scale-img"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI2"
0 0 27 3 2 #") "
0 6           4 23 2599
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pu"
 #"lled-point 0 0 60 60 0 0) #(struct"
 #":pulled-point 0 0 0 60 0 0)) 255 \"blue\"))) #(struct:translate 0 0 "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 "
 #"0 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\")"
 #")))) #(struct:translate 60 6.0 #(struct:scale 9/10 9/10 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 4."
 #"01923788646684 #(struct:translate -0.0 51.96152422706632 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"60 0 0 0) #(struct:pulled-point 0 0 30.000000000000014 -51.961524227"
 #"06632 0 0)) 255 \"green\"))) #(struct:translate 0.0 0 #(struct:trans"
 #"late 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(stru"
 #"ct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0 60 60 0 0) #"
 #"(struct:pulled-point 0 0 0 60 0 0)) outline \"black\"))))) #(struct:"
 #"translate 60.0 6.0 #(struct:scale 9/10 9/10 #(struct:overlay #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 0.06637120812694"
 #"519 1.5314272811289058 #(struct:translate 11.433628791873055 56.9371"
 #"4543774219 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(st"
 #"ruct:pulled-point 0 0 48.433628791873055 -35.18909110292068 0 0) #(s"
 #"truct:pulled-point 0 0 -11.433628791873055 -35.189091102920685 0 0) "
 #"#(struct:pulled-point 0 0 37 0 0 0) #(struct:pulled-point 0 0 18.500"
 #"000000000004 -56.93714543774219 0 0)) 255 \"yellow\"))) #(struct:tra"
 #"nslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pull"
 #"ed-point 0 0 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline"
 #" \"black\"))))) #(struct:translate 60.0 60.0 #(struct:scale 9/10 9/1"
 #"0 #(struct:crop (#(struct:point 0 0) #(struct:point 0 0) #(struct:po"
 #"int 0 0) #(struct:point 0 0)) #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#("
 #"struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) "
 #"#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0"
 #")) outline #(struct:pen \"black\" 2 solid round round)))) #(struct:t"
 #"ranslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0)) 255 \"whi"
 #"te\"))))))))))))))) #(struct:bb 162.60000000000002 60.0 60.0) #f)"
) 0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"scale-img"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI1"
0 0 27 3 2 #") "
0 6           4 23 2022
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 4.01923788646684 #(struct:translate -0.0 51.9615242270663"
 #"2 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 60 0 0 0) #(struct:pulled-point 0 0 30.000000000000014 "
 #"-51.96152422706632 0 0)) 255 \"green\"))) #(struct:translate 0.0 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0"
 #" 60 60 0 0) #(struct:pulled-point 0 0 0 60 0 0)) outline \"black\"))"
 #"))) #(struct:translate 60.0 6.0 #(struct:scale 9/10 9/10 #(struct:ov"
 #"erlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0.0"
 #"6637120812694519 1.5314272811289058 #(struct:translate 11.4336287918"
 #"73055 56.93714543774219 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 48.433628791873055 -35.1890911029"
 #"2068 0 0) #(struct:pulled-point 0 0 -11.433628791873055 -35.18909110"
 #"2920685 0 0) #(struct:pulled-point 0 0 37 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 18.500000000000004 -56.93714543774219 0 0)) 255 \"yellow\")))"
 #" #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(s"
 #"truct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) "
 #"#(struct:pulled-point 0 0 60 60 0 0) #(struct:pulled-point 0 0 0 60 "
 #"0 0)) outline \"black\"))))) #(struct:translate 60.0 60.0 #(struct:s"
 #"cale 9/10 9/10 #(struct:crop (#(struct:point 0 0) #(struct:point 0 0"
 #") #(struct:point 0 0) #(struct:point 0 0)) #(struct:translate 0 0 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 0 0 0 0)) outline #(struct:pen \"black\" 2 solid round round))"
 #")) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#"
 #"(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 "
 #"0)) 255 \"white\")))))))))))) #(struct:bb 114.0 60.0 60.0) #f)"
) 0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"scale-img"
0 0 27 3 1 #" "
0 0 14 3 11 #"Framed-LOI0"
0 0 27 3 2 #") "
0 6           4 23 1422
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0.06637120812694519 1.5314272811289058 #(struct:translate 1"
 #"1.433628791873055 56.93714543774219 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 48.433628791873055 -3"
 #"5.18909110292068 0 0) #(struct:pulled-point 0 0 -11.433628791873055 "
 #"-35.189091102920685 0 0) #(struct:pulled-point 0 0 37 0 0 0) #(struc"
 #"t:pulled-point 0 0 18.500000000000"
 #"004 -56.93714543774219 0 0)) 255 \"yellow\"))) #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0"
 #" 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point "
 #"0 0 60 60 0 0) #(struct:pulled-po"
 #"int 0 0 0 60 0 0)) outline \"black\"))))) #(struct:translate 60.0 60"
 #".0 #(struct:scale 9/10 9/10 #(struct:crop (#(struct:point 0 0) #(str"
 #"uct:point 0 0) #(struct:point 0 0) #(struct:point 0 0)) #(struct:tra"
 #"nslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translat"
 #"e 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 0 0 0 0)) outline #(struct:pen \"black\" 2 solid "
 #"round round)))) #(struct:translate 0 0 #(struct:translate 0 0 #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point"
 #" 0 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 0 0 0)) 255 \"white\"))))))))) #(struct:bb 60.0 60.0 60.0) "
 #"#f)"
) 0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 31 #"; -------- Excercise 8 --------"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON0"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 4 #"()))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON1"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"7"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON0"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON2"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON3"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON2"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 36 #"; eliminates given value from a list"
0 0 27 29 1 #"\n"
0 0 18 3 19 #"; number lon -> lon"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"eliminate"
0 0 27 3 1 #" "
0 0 14 3 6 #"number"
0 0 27 3 1 #" "
0 0 14 3 3 #"LON"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 3 #"LON"
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 3 #"()]"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 27 3 1 #" "
0 0 14 3 3 #"LON"
0 0 27 3 3 #") ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 1 #" "
0 0 14 3 6 #"number"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 3 #"LON"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                     ("
0 0 14 3 9 #"eliminate"
0 0 27 3 1 #" "
0 0 14 3 6 #"number"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 3 #"LON"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                     ("
0 0 14 3 6 #"append"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 3 #"LON"
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ("
0 0 14 3 9 #"eliminate"
0 0 27 3 1 #" "
0 0 14 3 6 #"number"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 3 #"LON"
0 0 27 3 7 #"))))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"eliminate"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON3"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"7"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 5 #"())))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"eliminate"
0 0 27 3 1 #" "
0 0 23 3 1 #"7"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON2"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 5 #"())))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"eliminate"
0 0 27 3 1 #" "
0 0 23 3 1 #"6"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON1"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"7"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 5 #"())))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"eliminate"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON0"
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 9 #"eliminate"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 4 #"()) "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 2 #"#;"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 14 #"eliminate-temp"
0 0 27 3 1 #" "
0 0 14 3 3 #"lon"
0 0 27 3 1 #" "
0 0 14 3 1 #"n"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 3 #"lon"
0 0 27 3 2 #") "
0 0 14 3 1 #"n"
0 0 27 3 3 #") ("
0 0 14 3 14 #"eliminate-temp"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 3 #"lon"
0 0 27 3 2 #") "
0 0 14 3 1 #"n"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 3 #"lon"
0 0 27 3 3 #") ("
0 0 14 3 3 #"..."
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 3 #"lon"
0 0 27 3 3 #") ("
0 0 14 3 9 #"eliminate"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 3 #"lon"
0 0 27 3 2 #") "
0 0 14 3 1 #"n"
0 0 27 3 5 #"))]))"
0 0 27 29 1 #"\n"
0 0 27 3 29 #"                             "
0 0 27 29 1 #"\n"
0 0 18 3 31 #"; -------- Excercise 9 --------"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 84
(
 #"; Takes a list and adds a given number to the end of that list rathe"
 #"r than the start"
) 0 0 27 29 1 #"\n"
0 0 18 3 19 #"; lon number -> lon"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"snoc"
0 0 27 3 1 #" "
0 0 14 3 3 #"LON"
0 0 27 3 1 #" "
0 0 14 3 6 #"number"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 3 #"LON"
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 3 #"()]"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 27 3 1 #" "
0 0 14 3 3 #"LON"
0 0 27 3 3 #") ("
0 0 14 3 6 #"append"
0 0 27 3 1 #" "
0 0 14 3 3 #"LON"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 14 3 6 #"number"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 7 #"()))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 4 #"snoc"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 3 #"() "
0 0 23 3 1 #"0"
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 4 #"snoc"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON0"
0 0 27 3 1 #" "
0 0 23 3 1 #"9"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"9"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 5 #"())))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 4 #"snoc"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON1"
0 0 27 3 1 #" "
0 0 23 3 1 #"3"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"7"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"3"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 6 #"()))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 4 #"snoc"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON2"
0 0 27 3 1 #" "
0 0 23 3 1 #"4"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"7"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"4"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 7 #"())))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 4 #"snoc"
0 0 27 3 1 #" "
0 0 14 3 4 #"LON3"
0 0 27 3 1 #" "
0 0 23 3 1 #"7"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"2"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"7"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"5"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"7"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 8 #"()))))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 2 #"#;"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"temp-snoc"
0 0 27 3 1 #" "
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 6 #"number"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 4 #"list"
0 0 27 3 3 #") ("
0 0 14 3 3 #"..."
0 0 27 3 1 #"("
0 0 14 3 6 #"number"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 5 #"()))]"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"      [("
0 0 14 3 5 #"cons?"
0 0 27 3 1 #" "
0 0 14 3 4 #"list"
0 0 27 3 3 #") ("
0 0 14 3 3 #"..."
0 0 27 3 1 #"("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 4 #"list"
0 0 27 3 1 #")"
0 0 14 3 3 #"..."
0 0 27 3 1 #"("
0 0 14 3 9 #"temp-snoc"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 4 #"list"
0 0 27 3 2 #") "
0 0 14 3 6 #"number"
0 0 27 3 5 #"))]))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 76
(
 #";(check-expect (snoc N3 5) (cons 7 (cons 2 (cons 2 (cons 5 (cons 5 '"
 #"()))))))"
) 0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 32 #"; -------- Excercise 10 --------"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOS0"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 20 3 17 #"\"bob the builder\""
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 4 #"()))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOS1"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 20 3 16 #"\"the pizza rats\""
0 0 27 3 1 #" "
0 0 14 3 4 #"LOS0"
0 0 27 3 3 #")) "
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOS2"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 20 3 16 #"\"always strings\""
0 0 27 3 1 #" "
0 0 14 3 4 #"LOS1"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOS3"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 20 3 14 #"\"always sunny\""
0 0 27 3 1 #" "
0 0 14 3 4 #"LOS2"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 81
(
 #"; Checks a List Of Strings to see if they contain the given string a"
 #"s a substring"
) 0 0 27 29 1 #"\n"
0 0 18 3 20 #"; LOS string -> LOS "
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"search-for"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOS"
0 0 27 3 1 #" "
0 0 14 3 5 #"input"
0 0 27 3 2 #") "
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOS"
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 3 #"()]"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOS"
0 0 27 3 3 #") ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 16 #"string-contains?"
0 0 27 3 1 #" "
0 0 14 3 5 #"input"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOS"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                     ("
0 0 14 3 6 #"append"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOS"
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 23 #"                      ("
0 0 14 3 10 #"search-for"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOS"
0 0 27 3 2 #") "
0 0 14 3 5 #"input"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                     ("
0 0 14 3 10 #"search-for"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 3 #"LOS"
0 0 27 3 2 #") "
0 0 14 3 5 #"input"
0 0 27 3 6 #"))])) "
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"search-for"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOS0"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"bob\""
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 20 3 17 #"\"bob the builder\""
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 4 #"()))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"search-for"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOS1"
0 0 27 3 1 #" "
0 0 20 3 5 #"\"the\""
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 20 3 16 #"\"the pizza rats\""
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 20 3 17 #"\"bob the builder\""
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 5 #"())))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"search-for"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOS2"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"always\""
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 20 3 16 #"\"always strings\""
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 4 #"()))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"search-for"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOS3"
0 0 27 3 1 #" "
0 0 20 3 8 #"\"always\""
0 0 27 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 20 3 14 #"\"always sunny\""
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 20 3 16 #"\"always strings\""
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 5 #"())))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"search-for"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOS3"
0 0 27 3 1 #" "
0 0 20 3 3 #"\"a\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 20 3 14 #"\"always sunny\""
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 20 3 16 #"\"always strings\""
0 0 27 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 20 3 16 #"\"the pizza rats\""
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 6 #"()))))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 27 3 2 #" ("
0 0 14 3 10 #"search-for"
0 0 27 3 1 #" "
0 0 14 3 4 #"LOS3"
0 0 27 3 1 #" "
0 0 20 3 7 #"\"hello\""
0 0 27 3 2 #") "
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0           0
